type: edu
files:
- name: src/Main.kt
  visible: true
  text: |-
    package tictactoe

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() != 11) {
                throw new BlockParseException("Every block should " +
                    "contain 11 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/Blockchain.kt
  visible: true
  text: |-
    package blockchain

    import java.security.MessageDigest
    import java.util.*

    class Blockchain(private var difficultyLevel: Int) {
        private var length: Int = 0
        private val blocksList: MutableList<Block> = mutableListOf()

        fun generateNewBlock() {
            val newBlock = Block()
            blocksList.add(newBlock)
            length++
        }

        fun printBlockchain(){
            for (block in blocksList) {
                println(block)
            }
        }

        fun applySha256(input: String): String {
            return try {
                val digest = MessageDigest.getInstance("SHA-256")
                /* Applies sha256 to our input */
                val hash = digest.digest(input.toByteArray(charset("UTF-8")))
                val hexString = StringBuilder()
                for (elem in hash) {
                    val hex = Integer.toHexString(0xff and elem.toInt())
                    if (hex.length == 1) hexString.append('0')
                    hexString.append(hex)
                }
                hexString.toString()
            } catch (e: Exception) {
                throw RuntimeException(e)
            }
        }

        inner class Block {
            private val id: Int = length + 1
            private val timestamp: Long = System.currentTimeMillis()
            private var magicNumber: Long
            private val previousBlockHash: String
            private val currentBlockHash: String
            private val creationTime: Int

            init {
                val creationStartingTime = System.currentTimeMillis()
                previousBlockHash = if (blocksList.isEmpty()) "0" else blocksList.last().currentBlockHash

                // Generating how the hash should look like
                val difficultyStringBuilder: StringBuilder = StringBuilder()
                for (i in 1..difficultyLevel){
                    difficultyStringBuilder.append("0")
                }
                val difficultyString = difficultyStringBuilder.toString()

                // Testing for the magic number that will pass the difficulty level
                while (true) {
                    magicNumber = Random().nextLong()
                    val testedHash = applySha256(this.toString())
                    if (testedHash.startsWith(difficultyString)) {
                        break
                    }
                }
                currentBlockHash = applySha256(this.toString())
                creationTime = ((System.currentTimeMillis() - creationStartingTime) / 1000).toInt()
            }

            override fun toString(): String {
                return "Block: \n" +
                        "Id: $id \n" +
                        "Timestamp: $timestamp \n" +
                        "Magic number: $magicNumber \n" +
                        "Hash of the previous block: \n" +
                        "$previousBlockHash \n" +
                        "Hash of the block: \n" +
                        "$currentBlockHash \n" +
                        "Block was generating for $creationTime seconds \n"

            }
        }
    }
  learner_created: true
- name: src/Miner.kt
  visible: true
  learner_created: true
- name: src/Block.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/20394#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 08 Aug 2022 13:33:24 UTC
record: 3
